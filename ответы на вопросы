1. Что такое ООП? – полное определение

Объектно-ориентированное программирование (ООП) — это парадигма программирования, основанная на концепции «объектов», которые могут содержать данные в виде полей (атрибутов или свойств) и код в виде процедур (методов). ООП позволяет моделировать сложные системы, разбивая их на более управляемые части. Основные принципы ООП включают:

• Инкапсуляция: Скрытие внутренней реализации объекта и предоставление интерфейса для взаимодействия с ним.

• Наследование: Возможность создавать новые классы на основе существующих, что позволяет повторно использовать код и расширять функциональность.

• Полиморфизм: Способность объектов разных классов обрабатывать данные по-разному, используя один и тот же интерфейс.

Эти принципы помогают повысить модульность, удобство поддержки и повторного использования кода.

---

▎2. Магическое число 7 Миллера

Магическое число 7 Миллера — это концепция из психологии, предложенная психологом Джорджем Миллером в 1956 году, согласно которой количество объектов, которые человек может удерживать в рабочей памяти, обычно составляет около семи (плюс-минус два). В IT это проявляется в следующих примерах:

1. Размеры блоков памяти: Часто оптимальные размеры блоков для обработки данных составляют 4, 8, 16, 32, 64 и т.д.

2. Количество параметров функций: Рекомендуется не превышать 7 параметров в функции для упрощения понимания и использования.

3. Максимальное количество вкладок в браузере: Пользователи обычно открывают не более 7-10 вкладок одновременно для удобства управления.

4. Меню навигации: Эффективное меню навигации на веб-сайтах часто содержит 5-7 пунктов.

5. Группировка данных: В аналитических отчетах часто группируют данные по категориям, не превышающим 7 элементов.

6. Идентификаторы: При создании идентификаторов (например, в URL) рекомендуется использовать не более 7 символов для удобства запоминания.

7. Элементы интерфейса: В диалоговых окнах лучше всего отображать 5-7 элементов управления для обеспечения простоты восприятия.

---

▎3. Энтропия ПО

Энтропия программного обеспечения — это мера неопределенности или сложности системы. Негативные меры энтропии могут включать:

1. Документация: Наличие актуальной и четкой документации снижает энтропию, делая систему более понятной.

2. Стандарты кодирования: Соблюдение стандартов кодирования помогает избежать путаницы и упрощает поддержку кода.

3. Автоматизированное тестирование: Наличие тестов снижает неопределенность в поведении программы и облегчает процесс внесения изменений.

4. Модульность: Разделение кода на модули с четкими интерфейсами уменьшает сложность восприятия системы.

5. Контроль версий: Использование систем контроля версий (например, Git) помогает отслеживать изменения и управлять состоянием проекта.

---

▎4. 5 признаков сложной системы по Гради Бучу

1. Непредсказуемость:

   • Пример из лабораторной работы: В проекте по разработке игры поведение NPC (неигровых персонажей) может быть непредсказуемым из-за случайных алгоритмов.

   • Пример из pet-проекта: В приложении для анализа данных результаты могут варьироваться в зависимости от входных данных.

2. Эмерджентность:

   • Пример из лабораторной работы: В многопользовательской игре взаимодействие игроков может приводить к неожиданным альянсам или конфликтам.

   • Пример из pet-проекта: В системе рекомендаций поведение пользователей может создавать неожиданные паттерны предпочтений.

3. Адаптивность:

   • Пример из лабораторной работы: Алгоритмы машинного обучения адаптируются к новым данным и улучшают свои прогнозы со временем.

   • Пример из pet-проекта: В веб-приложении пользовательский интерфейс может изменяться в зависимости от предпочтений пользователя.

4. Сложные взаимодействия:

   • Пример из лабораторной работы: В распределенной системе взаимодействие между сервисами может приводить к сложным зависимостям и ошибкам.
   • Пример из pet-проекта: В приложении для управления проектами взаимодействие между задачами может создавать сложности в планировании.

5. Многоуровневая структура:

   • Пример из лабораторной работы: Архитектура микросервисов включает несколько уровней абстракции, что усложняет понимание всей системы.

   • Пример из pet-проекта: Веб-приложение может иметь фронтенд, бэкенд и базу данных, каждый из которых требует отдельного внимания.

▎5. Закон иерархических компенсаций Седова

Закон иерархических компенсаций Седова утверждает, что изменения в одной части системы требуют соответствующих изменений в других частях для поддержания баланса. Примеры применения этого закона в эволюции IT-сферы:

1. Модульные архитектуры: При переходе от монолитных приложений к микросервисам необходимо пересмотреть взаимодействие между модулями и их зависимости.

2. Обновление языков программирования: Переход на новую версию языка требует обновления библиотек и инструментов разработки, чтобы поддерживать совместимость.

3. Изменение стандартов безопасности: При обновлении стандартов безопасности необходимо адаптировать все компоненты системы для соответствия новым требованиям.

4. Переход на облачные технологии: При миграции приложений в облако необходимо пересмотреть архитектуру приложений и модели хранения данных.

5. Внедрение Agile-методологий: Переход на Agile требует пересмотра процессов разработки, управления проектами и взаимодействия команд.
